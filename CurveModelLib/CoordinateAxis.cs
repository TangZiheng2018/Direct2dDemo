//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
using SharpDX.Mathematics.Interop;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
namespace CurveModelLib
{
    public class CoordinateAxis
    {
        public List<CoordinateLine> coordianteParamList = new List<CoordinateLine>();
        public float ArrowXBlankLength
        {
            get;
            set;
        }
        public float ArrowYBlankLength
        {
            get;
            set;
        }
        public float ScaleLength { set; get; }

        public float ArrowLength
        {
            get;
            set;
        }

        /// <summary>
        /// 横轴长度
        /// </summary>
        public float HLength
        {
            get;
            set;
        }
        /// <summary>
        /// 纵轴长度
        /// </summary>
        public float VLength
        {
            get;
            set;
        }
        public float LineInterval
        {
            get; set;
        }
        private RawColor4 color { set; get; }
        public CoordinateAxis(CanvasParam cp)
        {
            color = new RawColor4(0, 0, 1, 1);
            this.cp = cp;
            ArrowXBlankLength = 100;
            ArrowYBlankLength = 50;
            ArrowLength = 5;
            ScaleLength = 5;
            HLength = cp.HorizontalLength - ArrowLength - ArrowXBlankLength;
            VLength = cp.VerticalLength - ArrowLength - ArrowYBlankLength;
            LineInterval = 20;//坐标线之间的距离 仅用于右侧线
        }
        CanvasParam cp { set; get; }
        private void calculate()
        {
            foreach (var item in coordianteParamList)
            {
                if (item.lineDirection == LineDireciton.Horizontal)
                {
                    //计算线公式
                    item.StartPointX = cp.OriginX;
                    item.StartPointY = cp.OriginY;
                    item.EndPointX = cp.OriginX + HLength + ArrowLength + ArrowXBlankLength / 2;
                    item.EndPointY = cp.OriginY;
                    //计算箭头公式
                    item.ArrowPointX1 = item.EndPointX - ArrowLength;
                    item.ArrowPointY1 = item.EndPointY - 2;
                    item.ArrowPointX2 = item.EndPointX - ArrowLength;
                    item.ArrowPointY2 = item.EndPointY + 2;
                }
                else
                {
                    if (item.lineLocation == LineLocation.Right)
                    {
                        item.StartPointX = cp.OriginX + HLength + item.Index * LineInterval;
                        item.StartPointY = cp.OriginY;
                        item.EndPointX = cp.OriginX + HLength + item.Index * LineInterval;
                        item.EndPointY = cp.OriginY - VLength - ArrowLength - ArrowYBlankLength / 5;
                    }
                    else
                    {
                        item.StartPointX = cp.OriginX;
                        item.StartPointY = cp.OriginY;
                        item.EndPointX = cp.OriginX;
                        item.EndPointY = cp.OriginY - VLength - ArrowYBlankLength / 5;
                    }
                    item.ArrowPointX1 = item.EndPointX - 2;
                    item.ArrowPointY1 = item.EndPointY + ArrowLength;
                    item.ArrowPointX2 = item.EndPointX + 2;
                    item.ArrowPointY2 = item.EndPointY + ArrowLength;
                }

            }
        }
        private void calculateScale()
        {
            foreach (var item in coordianteParamList)
            {
                item.scalePointList.Clear();
                float scaleCount = (item.MaxValue - item.MinValue) / item.Interval + 1;

                if (item.lineDirection == LineDireciton.Horizontal)
                {
                    item.UnitLength = HLength / (item.MaxValue - item.MinValue);
                    for (int i = 0; i < scaleCount; i++)
                    {
                        Tuple<RawVector2, RawVector2> scalePoint = new Tuple<RawVector2, RawVector2>(new RawVector2(item.StartPointX + item.UnitLength * i * item.Interval, item.StartPointY), new RawVector2(item.StartPointX + item.UnitLength * i * item.Interval, item.StartPointY + ScaleLength));
                        item.scalePointList.Add(scalePoint);
                    }
                }
                else
                {
                    item.UnitLength = VLength / (item.MaxValue - item.MinValue);
                    if (item.lineLocation == LineLocation.Right)
                    {
                        for (int i = 0; i < scaleCount; i++)
                        {
                            Tuple<RawVector2, RawVector2> scalePoint = new Tuple<RawVector2, RawVector2>(new RawVector2(item.StartPointX, item.StartPointY - item.UnitLength * i * item.Interval), new RawVector2(item.StartPointX + ScaleLength, item.StartPointY - item.UnitLength * i * item.Interval));
                            item.scalePointList.Add(scalePoint);
                        }
                    }
                    else
                    {
                        for (int i = 0; i < scaleCount; i++)
                        {
                            Tuple<RawVector2, RawVector2> scalePoint = new Tuple<RawVector2, RawVector2>(new RawVector2(item.StartPointX, item.StartPointY - item.UnitLength * i * item.Interval), new RawVector2(item.StartPointX - ScaleLength, item.StartPointY - item.UnitLength * i * item.Interval));
                            item.scalePointList.Add(scalePoint);
                        }
                    }
                }
            }

        }
        public void Draw()
        {
            calculate();
            calculateScale();
            drawLine();
            drawArrow();
            drawScale();
            drawLegend();
        }
        /// <summary>
        /// 绘制刻度线
        /// </summary>
        private void drawScale()
        {
            var brush = new SharpDX.Direct2D1.SolidColorBrush(cp._renderTarget, new RawColor4(0, 0, 1, 1));
            var strokeStyleProperties = new SharpDX.Direct2D1.StrokeStyleProperties();
            strokeStyleProperties.DashStyle = SharpDX.Direct2D1.DashStyle.Custom;
            float[] dashes = { 10, 5 };
            var strokeStyle = new SharpDX.Direct2D1.StrokeStyle(cp.factory, strokeStyleProperties, dashes);
            foreach (var item in coordianteParamList)
            {
                foreach (var C in item.scalePointList)
                {
                    cp._renderTarget.DrawLine(C.Item1, C.Item2, brush, item.LineWidth);
                    //是否显示虚线
                    if (item.virtualLineVisible == VirtualLineVisible.Visible)
                    {
                        if (item.lineDirection == LineDireciton.Horizontal)
                        {
                            RawVector2 rv = new RawVector2();
                            rv.X = C.Item1.X;
                            rv.Y = C.Item1.Y - VLength;
                            cp._renderTarget.DrawLine(C.Item1, rv, brush, 0.5F, strokeStyle);
                        }
                        else
                        {
                            if (item.lineLocation == LineLocation.Right)
                            {
                                RawVector2 rv = new RawVector2();
                                rv.X = C.Item1.X - HLength - item.Index * LineInterval;
                                rv.Y = C.Item1.Y;
                                cp._renderTarget.DrawLine(C.Item1, rv, brush, 0.5F, strokeStyle);
                            }
                            else
                            {
                                RawVector2 rv = new RawVector2();
                                rv.X = C.Item1.X+HLength;
                                rv.Y = C.Item1.Y;
                                cp._renderTarget.DrawLine(C.Item1, rv, brush, 0.5F, strokeStyle);
                            }

                        }
                    }
                }
            }
        }
        /// <summary>
        /// 绘制标识
        /// </summary>
        private void drawLegend()
        {
            var brush = new SharpDX.Direct2D1.SolidColorBrush(cp._renderTarget, new RawColor4(0, 0, 1, 1));
            var textformat = new SharpDX.DirectWrite.TextFormat(cp.dwFactory, "Arial", 12);
            foreach (var item in coordianteParamList)
            {
                if (item.lineDirection == LineDireciton.Horizontal)
                {
                    for (int i = 0; i < item.scalePointList.Count; i++)
                    {
                        cp._renderTarget.DrawText((item.MinValue + i * item.Interval).ToString(), textformat, new RawRectangleF(item.scalePointList[i].Item2.X - 5, item.scalePointList[i].Item2.Y, item.scalePointList[i].Item2.X + 200, item.scalePointList[i].Item2.Y + 200), brush);
                    }
                }
                else
                {
                    if (item.lineLocation == LineLocation.Right)
                    {
                        for (int i = 0; i < item.scalePointList.Count; i++)
                        {
                            cp._renderTarget.DrawText((item.MinValue + i * item.Interval).ToString(), textformat, new RawRectangleF(item.scalePointList[i].Item2.X, item.scalePointList[i].Item2.Y - 8, item.scalePointList[i].Item2.X + 200, item.scalePointList[i].Item2.Y + 200), brush);
                        }
                    }
                    else
                    {
                        for (int i = 0; i < item.scalePointList.Count; i++)
                        {
                            cp._renderTarget.DrawText((item.MinValue + i * item.Interval).ToString(), textformat, new RawRectangleF(item.scalePointList[i].Item2.X - 15, item.scalePointList[i].Item2.Y - 8, item.scalePointList[i].Item2.X + 200, item.scalePointList[i].Item2.Y), brush);
                        }
                    }
                }
            }
        }
        private void drawArrow()
        {
            var brush = new SharpDX.Direct2D1.SolidColorBrush(cp._renderTarget, new RawColor4(0, 0, 1, 1));
            foreach (var item in coordianteParamList)
            {
                RawVector2 pointS = new RawVector2(item.EndPointX, item.EndPointY);
                RawVector2 pointE1 = new RawVector2(item.ArrowPointX1, item.ArrowPointY1);
                RawVector2 pointE2 = new RawVector2(item.ArrowPointX2, item.ArrowPointY2);
                cp._renderTarget.DrawLine(pointS, pointE1, brush, item.LineWidth);
                cp._renderTarget.DrawLine(pointS, pointE2, brush, item.LineWidth);
            }
        }
        private void drawLine()
        {
            var brush = new SharpDX.Direct2D1.SolidColorBrush(cp._renderTarget, new RawColor4(0, 0, 1, 1));
            foreach (var item in coordianteParamList)
            {
                RawVector2 pointS = new RawVector2(item.StartPointX, item.StartPointY);
                RawVector2 pointE = new RawVector2(item.EndPointX, item.EndPointY);
                cp._renderTarget.DrawLine(pointS, pointE, brush, item.LineWidth);
            }
        }
    }

}
